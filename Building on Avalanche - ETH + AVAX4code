// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Token {

    uint256 public totalSupply;
    address public owner;
    string public tokenName = "Degen";
    string public tokenSymbol = "DGN";
    uint8 public tokenDecimals = 18;

    constructor() {
        owner = msg.sender;
    }

    mapping(address => uint256) public balances;

    // Mint function
    function mintTokens(address to, uint256 value) public {
        require(msg.sender == owner, "Only the owner can mint tokens.");
        require(value > 0, "Value must be greater than 0.");

        balances[to] += value;
        totalSupply += value;
    }

    // Burn function
    function burnTokens(address account, uint256 value) public {
        require(value <= balances[account], "Value exceeds balance.");

        balances[account] -= value;
        totalSupply -= value;
    }

    // Transfer function
    function transferTokens(address recipient, uint256 value) public {
        require(value <= balances[msg.sender], "Value exceeds balance.");
        require(recipient != address(0), "Cannot transfer to the zero address.");

        balances[msg.sender] -= value;
        balances[recipient] += value;
    }

    // Redeem function
    function redeemTokens(address beneficiary, uint256 value, uint256 item) public {
        require(value <= balances[beneficiary], "Value exceeds balance");

        if (item == 1) {
            require(value >= 50, "Insufficient tokens for Item 1");
            burnTokens(beneficiary, value);
        } else if (item == 2) {
            require(value >= 100, "Insufficient tokens for Item 2");
            burnTokens(beneficiary, value);
        } else if (item == 3) {
            require(value >= 200, "Insufficient tokens for Item 3");
            burnTokens(beneficiary, value);
        } else {
            revert("Invalid item");
        }
    } 
}
